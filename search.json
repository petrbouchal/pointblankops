[{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with Pointblank Operatives","text":"pointblankops package provides specialized data validation operations using lightweight operatives focused intelligence gathering. Operatives streamlined alternatives pointblank agents, designed efficient row-level failure detection without overhead full reporting capabilities. use case solves following: data large can memory run tests data understand rows fail test, downstream exclude different rows different situations depending purpose analysis need per-row validation results use post-processing Extracting interrogated agent tedious memory-intensive. preserve memory allow working large datasets, operatives focus extracting validation failures directly, without full reporting overhead pointblank agents. Per-row validation results returned tidy format, making easy integrate data processing workflows. can stored directly database saved file format like Parquet analysis, done efficiently minimal memory footprint. Validation failure information can also returned tibble immediate use R.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"creating-operatives","dir":"Articles","previous_headings":"","what":"Creating Operatives","title":"Getting Started with Pointblank Operatives","text":"Operatives created using create_operative() function, lightweight wrapper around pointblank’s create_agent():","code":"# Create test data test_data <- data.frame(   batch = c(\"A\", \"A\", \"B\", \"B\", \"C\"),   id = c(1, 2, 3, 4, 5),   value = c(10, NA, 15, 8, 12),   category = c(\"X\", \"Y\", \"X\", \"Z\", \"Y\") )  # Create an operative operative <- create_operative(test_data, tbl_name = \"test_data\", label = \"Test Operative\") operative"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"adding-validation-steps","dir":"Articles","previous_headings":"","what":"Adding Validation Steps","title":"Getting Started with Pointblank Operatives","text":"Just like pointblank agents, operatives can validation steps added :","code":"operative <- operative |>   col_vals_not_null(columns = vars(value)) |>   col_vals_between(columns = vars(value), left = 5, right = 20) |>   col_vals_in_set(columns = vars(category), set = c(\"X\", \"Y\", \"Z\"))"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"debriefing-operatives","dir":"Articles","previous_headings":"","what":"Debriefing Operatives","title":"Getting Started with Pointblank Operatives","text":"core functionality debrief() function, extracts validation failures:","code":"# Get failures as a tibble failures <- debrief(operative, row_id_col = c(\"batch\", \"id\")) failures #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null …"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"output-options","dir":"Articles","previous_headings":"","what":"Output Options","title":"Getting Started with Pointblank Operatives","text":"debrief() function supports multiple output formats:","code":"failures <- debrief(operative, row_id_col = c(\"batch\", \"id\")) failures #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null … debrief(operative,          row_id_col = c(\"batch\", \"id\"),          parquet_path = \"validation_failures.parquet\") read_parquet(\"validation_failures.parquet\") #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null … con <- DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Copy test data to database DBI::dbWriteTable(con, \"test_data\", test_data)  # Create operative from database table db_operative <- create_operative(test_data) |>   col_vals_not_null(columns = vars(value)) |>   col_vals_between(columns = vars(value), left = 5, right = 20)  # Save failures to database table debrief(db_operative,          row_id_col = c(\"batch\", \"id\"),          con = con,          output_tbl = \"validation_failures\") tbl(con, \"validation_failures\") |>   collect() #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null …"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"return-as-tibble-default","dir":"Articles","previous_headings":"","what":"1. Return as Tibble (default)","title":"Getting Started with Pointblank Operatives","text":"","code":"failures <- debrief(operative, row_id_col = c(\"batch\", \"id\")) failures #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null …"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"save-to-parquet-file","dir":"Articles","previous_headings":"","what":"2. Save to Parquet File","title":"Getting Started with Pointblank Operatives","text":"","code":"debrief(operative,          row_id_col = c(\"batch\", \"id\"),          parquet_path = \"validation_failures.parquet\") read_parquet(\"validation_failures.parquet\") #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null …"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"save-to-database","dir":"Articles","previous_headings":"","what":"3. Save to Database","title":"Getting Started with Pointblank Operatives","text":"","code":"con <- DBI::dbConnect(duckdb::duckdb(), \":memory:\")  # Copy test data to database DBI::dbWriteTable(con, \"test_data\", test_data)  # Create operative from database table db_operative <- create_operative(test_data) |>   col_vals_not_null(columns = vars(value)) |>   col_vals_between(columns = vars(value), left = 5, right = 20)  # Save failures to database table debrief(db_operative,          row_id_col = c(\"batch\", \"id\"),          con = con,          output_tbl = \"validation_failures\") tbl(con, \"validation_failures\") |>   collect() #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null …"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"memory-efficiency","dir":"Articles","previous_headings":"","what":"Memory Efficiency","title":"Getting Started with Pointblank Operatives","text":"large datasets, debrief() processes data chunks maintain memory efficiency:","code":"# Process in smaller chunks for memory efficiency failures <- debrief(operative,                     row_id_col = c(\"batch\", \"id\"),                    chunk_size = 500)  # Process 500 rows at a time failures #> # A tibble: 1 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null …"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"database-compatibility","dir":"Articles","previous_headings":"","what":"Database Compatibility","title":"Getting Started with Pointblank Operatives","text":"Operatives work seamlessly database tables via dbplyr:","code":"con <- DBI::dbConnect(duckdb::duckdb(), \":memory:\") DBI::dbWriteTable(con, \"large_table\", test_data)  # Create operative from database table db_operative <- create_operative(dplyr::tbl(con, \"large_table\")) |>   col_vals_not_null(columns = vars(value)) |>    col_vals_gt(value, 8)  # Debrief processes the query efficiently in the database failures <- debrief(db_operative, row_id_col = c(\"batch\", \"id\")) failures #> # A tibble: 2 × 6 #>   batch id    test_name test_type         column_name failure_details            #>   <chr> <chr> <chr>     <chr>             <chr>       <chr>                      #> 1 A     2     step_1    col_vals_not_null value       Failed col_vals_not_null … #> 2 B     4     step_2    col_vals_gt       value       Failed col_vals_gt on col…"},{"path":"https://petrbouchal.github.io/pointblankops/articles/pointblankops.html","id":"supported-validation-types","dir":"Articles","previous_headings":"","what":"Supported Validation Types","title":"Getting Started with Pointblank Operatives","text":"following pointblank validation functions supported: col_vals_not_null() / col_vals_null() col_vals_between() / col_vals_not_between() col_vals_in_set() / col_vals_not_in_set() col_vals_gt() / col_vals_gte() / col_vals_lt() / col_vals_lte() col_vals_equal() / col_vals_not_equal() Unsupported validation types automatically skipped message.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Petr Bouchal. Author, maintainer.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bouchal P (2025). pointblankops: Operational Extensions Pointblank. R package version 0.1.0, https://petrbouchal.github.io/pointblankops/.","code":"@Manual{,   title = {pointblankops: Operational Extensions for Pointblank},   author = {Petr Bouchal},   year = {2025},   note = {R package version 0.1.0},   url = {https://petrbouchal.github.io/pointblankops/}, }"},{"path":"https://petrbouchal.github.io/pointblankops/index.html","id":"pointblankops","dir":"","previous_headings":"","what":"Operational Extensions for Pointblank","title":"Operational Extensions for Pointblank","text":"goal pointblankops provide specialized data validation operations using lightweight operatives focused intelligence gathering. offers memory-efficient alternatives pointblank agents failure detection reporting.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Operational Extensions for Pointblank","text":"can install development version pointblankops GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"petrbouchal/pointblankops\")"},{"path":"https://petrbouchal.github.io/pointblankops/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Operational Extensions for Pointblank","text":"basic example shows use operatives data validation:","code":"library(pointblankops) library(dplyr)  # Create some test data test_data <- data.frame(   batch = c(\"A\", \"A\", \"B\", \"B\", \"C\"),   id = c(1, 2, 3, 4, 5),   value = c(10, NA, 15, 8, 12),   category = c(\"X\", \"Y\", \"X\", \"Z\", \"Y\") )  # Create an operative and add validation steps operative <- create_operative(test_data) %>%   pointblank::col_vals_not_null(columns = dplyr::vars(value)) %>%   pointblank::col_vals_between(columns = dplyr::vars(value), left = 5, right = 20)  # Debrief the operative to get only the failures failures <- debrief(operative, row_id_col = c(\"batch\", \"id\"))  print(failures)  # For database operations, install DBI package: # install.packages(\"DBI\")  # For parquet file operations, install arrow package: # install.packages(\"arrow\")"},{"path":"https://petrbouchal.github.io/pointblankops/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Operational Extensions for Pointblank","text":"Lightweight operatives: Streamlined alternatives pointblank agents Memory-efficient processing: Chunked processing large datasets Multiple output formats: Return tibbles, save parquet files, write databases Database compatibility: Works local data frames database tables (DuckDB, SQLite) Flexible ID columns: Support multiple row identifier columns Whimsical naming: Follows pointblank’s playful terminology (agents → operatives, interrogate → debrief)","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/check_pkg_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if required package is available — check_pkg_available","title":"Check if required package is available — check_pkg_available","text":"Check required package available","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/check_pkg_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if required package is available — check_pkg_available","text":"","code":"check_pkg_available(pkg, reason)"},{"path":"https://petrbouchal.github.io/pointblankops/reference/check_pkg_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if required package is available — check_pkg_available","text":"pkg Package name reason Description package needed","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_failure_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Create standardized failure records — create_failure_records","title":"Create standardized failure records — create_failure_records","text":"Create standardized failure records","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_failure_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create standardized failure records — create_failure_records","text":"","code":"create_failure_records(failures, step, row_id_col)"},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_operative.html","id":null,"dir":"Reference","previous_headings":"","what":"Create operative for focused failure detection — create_operative","title":"Create operative for focused failure detection — create_operative","text":"Creates lightweight operative object specialized data validation intelligence gathering. Operatives streamlined versions pointblank agents designed efficient failure detection without overhead full reporting capabilities.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_operative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create operative for focused failure detection — create_operative","text":"","code":"create_operative(tbl, tbl_name = NULL, label = NULL)"},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_operative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create operative for focused failure detection — create_operative","text":"tbl data.frame, tibble, database table (tbl_sql) validate tbl_name Optional name table (provided, inferred object) label Optional label operative","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_operative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create operative for focused failure detection — create_operative","text":"pointblank agent object configured operative class ptblank_operative","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/create_operative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create operative for focused failure detection — create_operative","text":"","code":"if (FALSE) { # \\dontrun{ # Create operative from data frame data <- data.frame(id = 1:5, value = c(1, 2, NA, 4, 5)) operative <- create_operative(data) |>   col_vals_not_null(columns = vars(value))  # Create operative from database table con <- DBI::dbConnect(duckdb::duckdb(), \":memory:\") operative <- create_operative(tbl(con, \"my_table\")) |>   col_vals_between(columns = vars(amount), left = 0, right = 1000) } # }"},{"path":"https://petrbouchal.github.io/pointblankops/reference/debrief.html","id":null,"dir":"Reference","previous_headings":"","what":"Debrief operative and extract failure intelligence — debrief","title":"Debrief operative and extract failure intelligence — debrief","text":"Extracts failure information operative (agent) configured validation steps. memory-efficient alternative full interrogation focuses identifying reporting validation failures.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/debrief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debrief operative and extract failure intelligence — debrief","text":"","code":"debrief(   operative,   row_id_col,   parquet_path = NULL,   con = NULL,   output_tbl = NULL,   chunk_size = 1000 )"},{"path":"https://petrbouchal.github.io/pointblankops/reference/debrief.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debrief operative and extract failure intelligence — debrief","text":"operative pointblank agent operative object validation steps row_id_col Character vector column names use row identifiers. columns included output identify failing rows. parquet_path Optional path save failures parquet file. provided, failures written file instead returned tibble. Requires 'arrow' package installed. con Optional database connection save failures. provided, failures inserted database table. Requires 'DBI' package installed. output_tbl Optional table name database output. provided con specified, table name inferred {source_table}_failures. chunk_size Number rows process memory efficiency. Default 1000.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/debrief.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Debrief operative and extract failure intelligence — debrief","text":"output path specified, returns tibble containing failure records ID columns, test metadata, failure details. parquet_path con provided, returns NULL invisibly writing failures.","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/debrief.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Debrief operative and extract failure intelligence — debrief","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage - return failures as tibble operative <- create_operative(mtcars) |>   col_vals_not_null(columns = vars(mpg)) |>   col_vals_between(columns = vars(cyl), left = 4, right = 8)  failures <- debrief(operative, row_id_col = c(\"gear\", \"carb\"))  # Save to parquet file (requires arrow package) # install.packages(\"arrow\") debrief(operative, row_id_col = \"gear\", parquet_path = \"failures.parquet\")  # Save to database (requires DBI package) # install.packages(\"DBI\") con <- DBI::dbConnect(duckdb::duckdb(), \":memory:\") debrief(operative, row_id_col = \"gear\", con = con, output_tbl = \"car_failures\") } # }"},{"path":"https://petrbouchal.github.io/pointblankops/reference/process_db_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Process failures for database tables — process_db_failures","title":"Process failures for database tables — process_db_failures","text":"Process failures database tables","code":""},{"path":"https://petrbouchal.github.io/pointblankops/reference/process_db_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process failures for database tables — process_db_failures","text":"","code":"process_db_failures(   failure_query,   step,   chunk_size,   output_to_parquet,   parquet_path,   output_to_db,   con,   failure_table_name,   output_to_df,   row_id_col )"}]
